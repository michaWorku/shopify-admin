generator client {
  provider = "prisma-client-js"
}

generator jsonSchema {
  provider                 = "prisma-json-schema-generator"
  includeRequiredFields    = "true"
  persistOriginalType      = "true"
  keepRelationScalarFields = "true"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id          String                  @id @default(uuid())
  firstName   String?
  middleName  String?
  lastName    String?
  phone       String                  @unique
  email       String?
  gender      Gender?
  password    String?
  birthDate   DateTime?
  isVerified  Boolean?
  status      Status                  @default(ACTIVE)
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  deletedAt   DateTime?
  blulkTasks  BulkTask[]
  clients     ClientUser[]
  submissions DynamicFormSubmission[]
  roles       RoleUser[]
  rewards     UserReward[]
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  createdBy   String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  status      Status           @default(ACTIVE)
  permissions RolePermission[]
  users       RoleUser[]
}

model Permission {
  id          String           @id @default(uuid())
  name        String
  description String?
  category    String?
  subject     String
  action      String
  conditions  Json?
  fields      String[]         @default([])
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  status      Status           @default(ACTIVE)
  roles       RolePermission[]
}

model RoleUser {
  userId String
  roleId String
  role   Role   @relation(fields: [roleId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([userId, roleId])
}

model RolePermission {
  roleId       String
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@id([roleId, permissionId])
}

model ClientUser {
  userId       String
  isRewareded  Boolean @default(false)
  isSystemUser Boolean @default(false)
  clientId     String
  client       Client  @relation(fields: [clientId], references: [id])
  user         User    @relation(fields: [userId], references: [id])

  @@id([userId, clientId])
}

model Client {
  id            String        @id @default(uuid())
  name          String
  promotionText String
  url           String?
  phone         String        @unique
  email         String?
  status        Status        @default(ACTIVE)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?
  users         ClientUser[]
  dynamicForms  DynamicForm[]
  rewards       Reward[]
}

model UserReward {
  userId   String
  rewardId String
  rewards  Reward @relation(fields: [rewardId], references: [id])
  users    User   @relation(fields: [userId], references: [id])

  @@id([userId, rewardId])
}

model Reward {
  id          String                  @id @default(uuid())
  name        String
  description String?
  rewardTaken Int                     @default(0)
  rewardGiven Int
  plan        PLAN                    @default(DAY)
  clientId    String
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  deletedAt   DateTime?
  formId      String
  createdBy   String
  status      Status                  @default(ACTIVE)
  submissions DynamicFormSubmission[]
  client      Client                  @relation(fields: [clientId], references: [id])
  form        DynamicForm             @relation(fields: [formId], references: [id])
  users       UserReward[]
}

model DynamicForm {
  id          String             @id @default(uuid())
  name        String
  description String?
  clientId    String
  createdBy   String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  deletedAt   DateTime?
  client      Client             @relation(fields: [clientId], references: [id])
  fields      DynamicFormField[]
  reward      Reward[]
}

model DynamicFormField {
  id           String               @id @default(uuid())
  name         String
  label        String
  description  String?
  type         DynamicFormFieldType
  required     Boolean
  options      Json?
  placeholder  String?
  defaultValue Json?
  order        Int
  formId       String
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  deletedAt    DateTime?
  dynamicFroms DynamicForm          @relation(fields: [formId], references: [id])
}

model DynamicFormSubmission {
  id            String    @id @default(uuid())
  data          Json
  submittedById String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  status        Status    @default(PENDING)
  rewardId      String
  reward        Reward    @relation(fields: [rewardId], references: [id])
  submittedBy   User      @relation(fields: [submittedById], references: [id])
}

model BulkTask {
  id           String     @id @default(uuid())
  discription  String
  status       BulkStatus
  taskCount    Int
  faildCount   Int
  successCount Int
  createdById  String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
  createdBy    User       @relation(fields: [createdById], references: [id])
  tasks        Task[]
}

model Task {
  id        String     @id @default(uuid())
  data      Json
  status    BulkStatus
  message   String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  bulkId    String?
  bulk      BulkTask?  @relation(fields: [bulkId], references: [id])
}

enum DynamicFormFieldType {
  TEXT
  NUMBER
  EMAIL
  PHONE
  SELECT
  CHECKBOX
  RADIO
  TEXTAREA
  DATE
}

enum PLAN {
  DAY
  WEEK
  MONTH
  YEAR
}

enum Status {
  PENDING
  ACTIVE
  INACTIVE
}

enum Gender {
  MALE
  FEMALE
}

enum BulkStatus {
  InProgress
  Complete
  Failed
  Canceled
  Canceling
}
